monotonic functions:
-which follows some given order 
-increasing 
-decreasing 
-predicate with initial false and then true 
-predicate with initial true and then false 

binary search:
-only works on monotonic functions 
-time complexity: logn
-due to half reduction of search space of initial size n

applications:
lower bound: logn
upper_bound: logn
nth root(func) of a number(target/input) (special case): p*log(x*pow(10,d)) (p is the time to calculate power ot f-inverse
using brute force exponentiation, in case of optimized approaches, the time complexity will be different and not p)

special applications:
1. finding func(input) where func is a monotonic function and input is the target given (broad case): t(f-inverse)*log(initial_search_space_size)
how to do it? 
see the reference of the sqrt of a number problem

2. questions involving the modelling of monotonic predicate functions 
how to do it? 
see the reference from the predicate function problem 













