maps:
    - order + frequency (ordered)
    - frequency + needed less time complexity + using simple data types as keys (unordered) 
    - order + frequency + duplicacy (ordered, with value as vector/set)
    - pairing + order (ordered)
    - pairing + time (unordered)
    - pairing + order + duplicacy (ordered, with value as vector/set)

sets:
    - order + unique (ordered) 
    - unique/finding presence + needed less time complexity (unordered)
    - order + duplicacy (multiset)

stacks:
    - paranthesis matching 
    - next greater element

which data structure to choose when? 
-order needed: set, map, multiset, multimap 
-duplicacy needed: multiset, multimap 
-time needed: unordered_map, unordered_set
-frequency: map, multimap, unordered_map
-pairing: maps / sets with the pair datatype 
-pairing + order: map, multimap(not used in CP)
-pairing + order + order in value: map<int, multiset<string>> list;

checks:
-order
-duplicacy/uniqueness 
-time 
-frequency 
-pairing 
-order
-order in second of pair 


 

