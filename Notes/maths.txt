GCD and LCM:
- gcd: take the min power of the prime factors of both the numbers 
- lcm: take the max power of the prime factors of both the numbers
- relation between gcd and lcm of both the numbers 
- if we know some algorithm to find the gcd, then we know the same for lcm also 
- ways of finding gcd:
    - euclidean algorithm (log n)
- applications of gcd:
    - finding the gcd between more than 2 numbers: ans = gcd(gcd(a,b),c)
    - finding the min. fraction or lowest term of a fraction? (divide the num and denom by gcd)

Binary exponentiation:
- it is an algorithm for finding the power of a to the b 
- we need this algorithm because the pow(a,b) function returns the answer in double and double cannot be used to store 
large numbers precisely and therefore we cannot use the function for large numbers 
- see the program for algorithm (recursive approach)
- see the iterative program for algorithm (iterative algorithm)

divisors, their count, their sum:
- properties:
    - smallest divisor of a number is always a prime number
    - there exists atleast one prime number before sqrt(n) where n is composite
- finding by brute force (O(n)) 
- finding by mirror method (O(sqrt(n))) 
- finding by prime factorization formula (O(1)) (O(f(n)){prime-factorization} + O(1){formula})
 
primality:
- prime numbers: count == 2
  composite numbers: count>2
- if we can find count optimally, we can find primality optimally
- finding primality using brute force (O(n))
- finding primality using mirror method (O(sqrt(n))) 
- finding primality using prime factorization method (O(f(n)){prime-factorization} + O(1){formula})

prime factorization:
- 
