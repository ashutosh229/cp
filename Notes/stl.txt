A. containers:
    1.sequential:
    -vectors
    -pair 
    -stack 
    -queue 

    2. unordered:
    -unordered map 
    -unordered set 

    3. ordered 
    -ordered map 
    -ordered set 
    -multimap 
    -multiset 

B. Iterators:
-point to the memory address of the containers 
-vector<int>::iterator it = v.begin()
-value = *(it) //first value of vector
-vector<int>::iterator it = v.end()
-value = *(it-1) //last value of vector
-it++ -> goes to the next iterator 
-it+1 -> goes to the next location 
-the above two are same in case of linear containers 
-the above two are different in case of non-linear containers 
-when iterators are pointing to some pair, we use some other kind of syntax:
    -(*it).first === it->first 
    -(*it).second === it->second

C. Range based loops:
-for (int value: vec){} //here the value comes as a soft copy 
-for (int &value: vec){} //here the value comes as a hard copy

D. auto keyword:
-dynamic type 
-auto it = vec.begin(); //useful in case of iterators 



