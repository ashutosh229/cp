time complexity analysis and constraints:
any single statement of code is called 1 iteration
time complexity = O(number of iterations in the code)

some points to be noted for time complexity calculations:
1. n/2 i.e. log2(n) complexity 
2. inside loop depends on the outer loop: o(n2) (calculate manually)
3. we can convert multi-variable time function into single variable by seeing the constraints 
4. sum of n over all the test cases is less than 10power7: this line changes the time complexity since the total number of operations changes and becomes less than 10power7 i.e. code will run 

type of time complexites:
- 1 or constant: simple operations 
- n or polynomial: loops 
- n2: loop ke andar loop, etc 
- n3: similar cases 
- logn or logarithmic: search space dividsion (binary search, number reduction-digit extraction)
- nlogn: something extra in search space division 
- n2logn: something extra extra in search space division 
- 2powern or exponential: in case of tree division algorithms (recursion, backtracking)
- 